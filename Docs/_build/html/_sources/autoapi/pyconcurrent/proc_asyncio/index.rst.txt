pyconcurrent.proc_asyncio
=========================

.. py:module:: pyconcurrent.proc_asyncio

.. autoapi-nested-parse::

   Concurrent tasks using asyncio.





Module Contents
---------------

.. py:class:: ProcRunAsyncio(pargs: list[Any], tasks_todo: list[tuple[Any, Any]], num_workers: int = 4, timeout: int = 0, verb: bool = False)



   Run concurrent processes using asyncio.

   Asynio concurrent process runs. Supports program to be run as a
   subprocess or a function to be called.
   The result of each run is returned as in ProcResult class instance.

   Args:
       pargs ([Any]):
           The first element is the command/function to be run and remainder
           are any additional arguments.

       tasks_todo ([(Any, Any)]):
           list of task items to be run concurrently.
           Each task is a 2-tuple, *(key, arg)*.

           - key is a unique identifier, converable to string via str(key)
           - arg is an additional argument to the routine when it is called.

           Both key and arg are saved into the result class instance returned.

       num_workers (int):
           Max number of processes to use. Value of 0 is unlimited and 1 will
           mean each is run serially one at a time.

       timeout (int):
           The maximum number of seconds allotted to each process.
           If not complete within "timeout", then process/function
           will be cancelled/killed and the "result" instance will include:

           - res.success set to *False*
           - res.timeout set to *True*.

       verb (bool):
           If set to true, some additional information is sent to stdout.

   Attributes:
       result (*[ProcResult]*):
           list of results, one per task. See ProcResult for more detail.

   Methods:



   .. py:method:: print_results()

      Test tool : prints each result using the ProcResul::print().



   .. py:method:: run_all()
      :async:


      Start running all the provided commands/functions concurrently.

      Awaitable, so caller is responsible for calling asyncio.run().
      See run_all_start_asyncio() for non-awaitable version.



